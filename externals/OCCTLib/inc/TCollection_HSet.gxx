// Created on: 1993-03-03
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : TCollection_HSet
//purpose  : 
//=======================================================================

TCollection_HSet::TCollection_HSet()
{
}

//=======================================================================
//function : Union
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::Union
       (const Handle(TCollection_HSet)& B) const
{
  Handle(TCollection_HSet) R = new TCollection_HSet();
  R->ChangeSet() = mySet;
  R->ChangeSet().Union(B->Set());
  return R;
}

//=======================================================================
//function : Intersection
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::Intersection
       (const Handle(TCollection_HSet)& B) const
{
  Handle(TCollection_HSet) R = new TCollection_HSet();
  R->ChangeSet() = mySet;
  R->ChangeSet().Intersection(B->Set());
  return R;
}

//=======================================================================
//function : Difference
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::Difference
       (const Handle(TCollection_HSet)& B) const
{
  Handle(TCollection_HSet) R = new TCollection_HSet();
  R->ChangeSet() = mySet;
  R->ChangeSet().Difference(B->Set());
  return R;
}

//=======================================================================
//function : ShallowCopy
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::ShallowCopy() const
{
  Handle(TCollection_HSet) S = new TCollection_HSet();
  S->ChangeSet() = mySet;
  return S;
}

//=======================================================================
//function : IsSameState
//purpose  : 
//=======================================================================

//Standard_Boolean TCollection_HSet::IsSameState
//  (const Handle(TCollection_HSet)& Other) const
//{
//  Handle(TCollection_HSet) S = Handle(TCollection_HSet)::DownCast(Other);
//  Standard_Boolean result = Standard_False;
//  if (!S.IsNull()) {
//    if (S->Extent() == Extent()) {
//      result = IsASubset(S);
//    }
//  }
//  return result;
//}
