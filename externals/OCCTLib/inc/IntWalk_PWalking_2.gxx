// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//-------------------------------------------------------------------
//-- I n t W a l k _ P W a l k i n g _ 2 . g x x 
//-------------------------------------------------------------------



void IntWalk_PWalking::
        RepartirOuDiviser(Standard_Boolean& DejaReparti,
                          IntImp_ConstIsoparametric& ChoixIso,
                          Standard_Boolean& Arrive) 

// at the neighborhood of a point, there is a fail of marching 
// it is required to divide the steps to try to continue
// if the step is too small if we are on border
// restart in another direction if it was not done, otherwise stop

{
  //  Standard_Integer i;
  if (Arrive) {    //restart in the other direction
    if (!DejaReparti ) {
      Arrive        = Standard_False; 
      DejaReparti   = Standard_True;
      previousPoint = line->Value(1);
      previoustg    = Standard_False;
      previousd1    = firstd1;
      previousd2    = firstd2;
      previousd     = tgdir;
      indextg       = line->NbPoints();
      tgdir.Reverse();
      line->Reverse();

//-- printf("\nIntWalk_PWalking_2.gxx Reverse %3d\n",indextg);
      sensCheminement = -1;
      tgfirst      = tglast;
      tglast       = Standard_False;
      ChoixIso     = choixIsoSav;
#if 0
      pasuv[0]=pasSav[0];
      pasuv[1]=pasSav[1];
      pasuv[2]=pasSav[2];
      pasuv[3]=pasSav[3];
#else 
      Standard_Real u1,v1,u2,v2;
      Standard_Real U1,V1,U2,V2;
      Standard_Integer nn=line->NbPoints();
      if(nn>2) { 
	line->Value(nn).Parameters(u1,v1,u2,v2);
	line->Value(nn-1).Parameters(U1,V1,U2,V2);
	pasuv[0]=Abs(u1-U1);
	pasuv[1]=Abs(v1-V1);
	pasuv[2]=Abs(u2-U2);
	pasuv[3]=Abs(v2-V2);
      }
#endif
	
    }
  }  
  else  {
    if (    pasuv[0]*0.5 < ResoU1
	&&  pasuv[1]*0.5 < ResoV1
	&&  pasuv[2]*0.5 < ResoU2
	&&  pasuv[3]*0.5 < ResoV2
	) {
      if (!previoustg) {
	tglast = Standard_True;      // IS IT ENOUGH ????
      }
      
      if (!DejaReparti) {  //restart in the other direction
	DejaReparti       = Standard_True;
	previousPoint     = line->Value(1);
	previoustg        = Standard_False;
	previousd1        = firstd1;
	previousd2        = firstd2;
	previousd         = tgdir;
	indextg           = line->NbPoints();
	tgdir.Reverse();
	line->Reverse();

//-- printf("\nIntWalk_PWalking_2.gxx Reverse %3d\n",indextg);

	sensCheminement   = -1;
	tgfirst           = tglast;
	tglast            = Standard_False;
	ChoixIso          = choixIsoSav;

#if 0 
	pasuv[0]=pasSav[0];
	pasuv[1]=pasSav[1];
	pasuv[2]=pasSav[2];
	pasuv[3]=pasSav[3];
#else 
	Standard_Real u1,v1,u2,v2;
	Standard_Real U1,V1,U2,V2;
	Standard_Integer nn=line->NbPoints();
	if(nn>2) { 
	  line->Value(nn).Parameters(u1,v1,u2,v2);
	  line->Value(nn-1).Parameters(U1,V1,U2,V2);
	  pasuv[0]=Abs(u1-U1);
	  pasuv[1]=Abs(v1-V1);
	  pasuv[2]=Abs(u2-U2);
	  pasuv[3]=Abs(v2-V2);
	}
#endif
      }
      else Arrive = Standard_True;
    }
    else {
      pasuv[0]*=0.5;
      pasuv[1]*=0.5;
      pasuv[2]*=0.5;
      pasuv[3]*=0.5; 
    }
  }
}










