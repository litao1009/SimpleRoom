// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPAlgo_PaveFiller_HeaderFile
#define _BOPAlgo_PaveFiller_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _BOPCol_ListOfShape_HeaderFile
#include <BOPCol_ListOfShape.hxx>
#endif
#ifndef _BOPDS_PDS_HeaderFile
#include <BOPDS_PDS.hxx>
#endif
#ifndef _BOPDS_PIterator_HeaderFile
#include <BOPDS_PIterator.hxx>
#endif
#ifndef _Handle_BOPInt_Context_HeaderFile
#include <Handle_BOPInt_Context.hxx>
#endif
#ifndef _BOPAlgo_SectionAttribute_HeaderFile
#include <BOPAlgo_SectionAttribute.hxx>
#endif
#ifndef _BOPAlgo_Algo_HeaderFile
#include <BOPAlgo_Algo.hxx>
#endif
#ifndef _BOPCol_BaseAllocator_HeaderFile
#include <BOPCol_BaseAllocator.hxx>
#endif
#ifndef _Handle_BOPDS_PaveBlock_HeaderFile
#include <Handle_BOPDS_PaveBlock.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks_HeaderFile
#include <BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _BOPCol_MapOfInteger_HeaderFile
#include <BOPCol_MapOfInteger.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _BOPCol_DataMapOfIntegerReal_HeaderFile
#include <BOPCol_DataMapOfIntegerReal.hxx>
#endif
#ifndef _BOPDS_IndexedMapOfPaveBlock_HeaderFile
#include <BOPDS_IndexedMapOfPaveBlock.hxx>
#endif
#ifndef _BOPCol_ListOfInteger_HeaderFile
#include <BOPCol_ListOfInteger.hxx>
#endif
#ifndef _BOPCol_DataMapOfShapeInteger_HeaderFile
#include <BOPCol_DataMapOfShapeInteger.hxx>
#endif
#ifndef _BOPDS_DataMapOfPaveBlockListOfPaveBlock_HeaderFile
#include <BOPDS_DataMapOfPaveBlockListOfPaveBlock.hxx>
#endif
#ifndef _BOPCol_DataMapOfIntegerInteger_HeaderFile
#include <BOPCol_DataMapOfIntegerInteger.hxx>
#endif
#ifndef _BOPDS_ListOfPaveBlock_HeaderFile
#include <BOPDS_ListOfPaveBlock.hxx>
#endif
#ifndef _BOPDS_MapOfPaveBlock_HeaderFile
#include <BOPDS_MapOfPaveBlock.hxx>
#endif
#ifndef _BOPCol_IndexedDataMapOfShapeInteger_HeaderFile
#include <BOPCol_IndexedDataMapOfShapeInteger.hxx>
#endif
#ifndef _BOPCol_IndexedDataMapOfShapeListOfShape_HeaderFile
#include <BOPCol_IndexedDataMapOfShapeListOfShape.hxx>
#endif
#ifndef _BOPDS_VectorOfCurve_HeaderFile
#include <BOPDS_VectorOfCurve.hxx>
#endif
class BOPInt_Context;
class BOPDS_DS;
class BOPAlgo_SectionAttribute;
class BOPDS_PaveBlock;
class TopoDS_Vertex;
class gp_Pnt;
class BOPDS_Curve;
class TopoDS_Face;
class IntSurf_ListOfPntOn2S;



class BOPAlgo_PaveFiller  : public BOPAlgo_Algo {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   BOPAlgo_PaveFiller();
Standard_EXPORT virtual ~BOPAlgo_PaveFiller();
  
  Standard_EXPORT   BOPAlgo_PaveFiller(const BOPCol_BaseAllocator& theAllocator);
  
  Standard_EXPORT    const BOPDS_DS& DS() ;
  
  Standard_EXPORT     BOPDS_PDS PDS() ;
  
  Standard_EXPORT    const BOPDS_PIterator& Iterator() ;
  
  Standard_EXPORT    const BOPCol_ListOfShape& Arguments() const;
Standard_EXPORT void SetArguments(const BOPCol_ListOfShape& theLS);
  
  Standard_EXPORT     Handle_BOPInt_Context Context() ;
  
  Standard_EXPORT     void SetSectionAttribute(const BOPAlgo_SectionAttribute& theSecAttr) ;
  
  Standard_EXPORT   virtual  void Perform() ;





protected:

  
  Standard_EXPORT   virtual  void Clear() ;
  
  Standard_EXPORT   virtual  void Init() ;
  
  Standard_EXPORT   virtual  void PerformVV() ;
  
  Standard_EXPORT   virtual  void PerformVE() ;
  
  Standard_EXPORT   virtual  void PerformVF() ;
  
  Standard_EXPORT   virtual  void PerformEE() ;
  
  Standard_EXPORT   virtual  void PerformEF() ;
  
  Standard_EXPORT   virtual  void PerformFF() ;
  
  Standard_EXPORT     void TreatVerticesEE() ;
  
  Standard_EXPORT     void MakeSplitEdges() ;
  
  Standard_EXPORT     void MakeBlocks() ;
  
  Standard_EXPORT     void MakePCurves() ;
  
  Standard_EXPORT     void ProcessDE() ;
  
  Standard_EXPORT     void FillShrunkData(Handle(BOPDS_PaveBlock)& thePB) ;
  
  Standard_EXPORT     void FillShrunkData(const TopAbs_ShapeEnum theType1,const TopAbs_ShapeEnum theType2) ;
  
  Standard_EXPORT     Standard_Integer PerformVerticesEE(BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks& theMVCPB,BOPCol_BaseAllocator& theAllocator) ;
  
  Standard_EXPORT     Standard_Integer PerformVerticesEF(BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks& theMVCPB,BOPCol_BaseAllocator& theAllocator) ;
  
  Standard_EXPORT     Standard_Boolean CheckFacePaves(const TopoDS_Vertex& theVnew,const BOPCol_MapOfInteger& theMIF) ;
  
  Standard_EXPORT   static  Standard_Boolean CheckFacePaves(const Standard_Integer theN,const BOPCol_MapOfInteger& theMIFOn,const BOPCol_MapOfInteger& theMIFIn) ;
  
  Standard_EXPORT     Standard_Boolean IsExistingVertex(const gp_Pnt& theP,const Standard_Real theTol,const BOPCol_MapOfInteger& theMVOn) const;
  
//! Checks and puts paves from <theMVOn> on the curve <theNC>. <br>
  Standard_EXPORT     void PutPavesOnCurve(const BOPCol_MapOfInteger& theMVOn,const Standard_Real theTolR3D,BOPDS_Curve& theNC,const Standard_Integer nF1,const Standard_Integer nF2,const BOPCol_MapOfInteger& theMI,const BOPCol_MapOfInteger& theMVEF,BOPCol_DataMapOfIntegerReal& theMVTol) ;
  
//! Depending on the parameter aType it checks whether <br>
//! the vertex nV was created in EE or EF intersections. <br>
//! If so, it increases aTolVExt from tolerance value of vertex to <br>
//! the max distance from vertex nV to the ends of the range of common part. <br>
//! Possible values of aType: <br>
//! 1 - checks only EE; <br>
//! 2 - checks only EF; <br>
//! other - checks both types of intersections. <br>
  Standard_EXPORT     Standard_Boolean ExtendedTolerance(const Standard_Integer nV,const BOPCol_MapOfInteger& aMI,Standard_Real& aTolVExt,const Standard_Integer aType = 0) ;
  
  Standard_EXPORT     void PutBoundPaveOnCurve(const TopoDS_Face& theF1,const TopoDS_Face& theF2,const Standard_Real theTolR3D,BOPDS_Curve& theNC,BOPCol_MapOfInteger& theMVOnIn,BOPCol_MapOfInteger& theMVB) ;
  
  Standard_EXPORT     Standard_Boolean IsExistingPaveBlock(const Handle(BOPDS_PaveBlock)& thePB,const BOPDS_Curve& theNC,const Standard_Real theTolR3D,const BOPDS_IndexedMapOfPaveBlock& theMPB,Handle(BOPDS_PaveBlock)& thePBOut) ;
  
  Standard_EXPORT     Standard_Boolean IsExistingPaveBlock(const Handle(BOPDS_PaveBlock)& thePB,const BOPDS_Curve& theNC,const Standard_Real theTolR3D,const BOPCol_ListOfInteger& theLSE) ;
  
//! Treatment of section edges. <br>
  Standard_EXPORT     Standard_Integer PostTreatFF(BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks& theMSCPB,BOPCol_DataMapOfShapeInteger& theMVI,BOPDS_DataMapOfPaveBlockListOfPaveBlock& theDMExEdges,BOPCol_DataMapOfIntegerInteger& theDMI,BOPCol_BaseAllocator& theAllocator) ;
  
  Standard_EXPORT     void FindPaveBlocks(const Standard_Integer theV,const Standard_Integer theF,BOPDS_ListOfPaveBlock& theLPB) ;
  
  Standard_EXPORT     void FillPaves(const Standard_Integer theV,const Standard_Integer theE,const Standard_Integer theF,const BOPDS_ListOfPaveBlock& theLPB,const Handle(BOPDS_PaveBlock)& thePB) ;
  
  Standard_EXPORT     void MakeSplitEdge(const Standard_Integer theV,const Standard_Integer theF) ;
  
  Standard_EXPORT     void GetEFPnts(const Standard_Integer nF1,const Standard_Integer nF2,IntSurf_ListOfPntOn2S& aListOfPnts) ;
  
//! Checks and puts paves created in EF intersections on the curve <theNC>. <br>
  Standard_EXPORT     void PutEFPavesOnCurve(BOPDS_Curve& theNC,const BOPCol_MapOfInteger& theMI,const BOPCol_MapOfInteger& theMVEF,BOPCol_DataMapOfIntegerReal& theMVTol) ;
  
//! Puts stick paves on the curve <theNC> <br>
  Standard_EXPORT     void PutStickPavesOnCurve(const TopoDS_Face& aF1,const TopoDS_Face& aF2,const BOPCol_MapOfInteger& theMI,BOPDS_Curve& theNC,const BOPCol_MapOfInteger& theMVStick,BOPCol_DataMapOfIntegerReal& theMVTol) ;
  
//! Collects indices of vertices created in all intersections between <br>
//! two faces (<nF1> and <nF2>) to the map <theMVStick>. <br>
//! Also, it collects indices of EF vertices to the <theMVEF> map <br>
//! and indices of all subshapes of these two faces to the <theMI> map. <br>
  Standard_EXPORT     void GetStickVertices(const Standard_Integer nF1,const Standard_Integer nF2,BOPCol_MapOfInteger& theMVStick,BOPCol_MapOfInteger& theMVEF,BOPCol_MapOfInteger& theMI) ;
  
//! Collects index nF and indices of all subshapes of the shape with index <nF> <br>
//! to the map <theMI>. <br>
  Standard_EXPORT     void GetFullShapeMap(const Standard_Integer nF,BOPCol_MapOfInteger& theMI) ;
  
//! Removes indices of vertices that are already on the <br>
//! curve <theNC> from the map <theMV>. <br>
//! It is used in PutEFPavesOnCurve and PutStickPavesOnCurve methods. <br>
  Standard_EXPORT     void RemoveUsedVertices(BOPDS_Curve& theNC,BOPCol_MapOfInteger& theMV) ;
  
//! Puts the pave nV on the curve theNC. <br>
//! Parameter aType defines whether to check the pave with <br>
//! extended tolerance: <br>
//! 0 - do not perform the check; <br>
//! other - perform the check (aType goes to ExtendedTolerance). <br>
  Standard_EXPORT     void PutPaveOnCurve(const Standard_Integer nV,const Standard_Real theTolR3D,BOPDS_Curve& theNC,const BOPCol_MapOfInteger& theMI,BOPCol_DataMapOfIntegerReal& theMVTol,const Standard_Integer aType = 0) ;
  
//! Adds the existing edges from the map <theMPBOnIn> which interfere <br>
//! with the vertices from <theMVB> map to the post treatment of section edges. <br>
  Standard_EXPORT     void ProcessExistingPaveBlocks(const Standard_Integer theInt,const BOPDS_IndexedMapOfPaveBlock& theMPBOnIn,BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks& theMSCPB,BOPCol_DataMapOfShapeInteger& theMVI,const BOPCol_MapOfInteger& theMVB,BOPDS_MapOfPaveBlock& theMPB) ;
  
//! Replaces existing pave block <thePB> with new pave blocks <theLPB>. <br>
//! The list <theLPB> contains images of <thePB> which were created in <br>
//! the post treatment of section edges. <br>
  Standard_EXPORT     void UpdateExistingPaveBlocks(const Handle(BOPDS_PaveBlock)& thePB,BOPDS_ListOfPaveBlock& theLPB,const Standard_Integer nF1,const Standard_Integer nF2) ;
  
//! Treatment of vertices that were created in EE intersections. <br>
  Standard_EXPORT     void TreatNewVertices(const BOPCol_IndexedDataMapOfShapeInteger& theMVI,BOPCol_IndexedDataMapOfShapeListOfShape& theImages) ;
  
//! Put paves on the curve <aBC> in case when <aBC> <br>
//! is closed 3D-curve <br>
  Standard_EXPORT     void PutClosingPaveOnCurve(BOPDS_Curve& aNC) ;
  
//! Keeps data for post treatment <br>
  Standard_EXPORT     void PreparePostTreatFF(const Standard_Integer aInt,const Handle(BOPDS_PaveBlock)& aPB,BOPDS_IndexedDataMapOfShapeCoupleOfPaveBlocks& aMSCPB,BOPCol_DataMapOfShapeInteger& aMVI,BOPDS_VectorOfCurve& aVC) ;
  
//! Refines the state On for the all faces having <br>
//! state information <br>
  Standard_EXPORT     void RefineFaceInfoOn() ;
  
//! Updates the information about faces <br>
  Standard_EXPORT     void UpdateFaceInfo(BOPDS_DataMapOfPaveBlockListOfPaveBlock& theDME) ;
  
//! Updates tolerance of vertex with index <nV> <br>
//! to make it interfere with edge <br>
  Standard_EXPORT     void ForceInterfVE(const Standard_Integer nV,Handle(BOPDS_PaveBlock)& aPB,BOPDS_MapOfPaveBlock& aMPB) ;
  
//! Updates tolerance of vertex with index <nV> <br>
//! to make it interfere with face with index <nF> <br>
  Standard_EXPORT     Standard_Boolean ForceInterfVF(const Standard_Integer nV,const Standard_Integer nF) ;
  
//! Checks if there are any common or intersecting sub shapes <br>
//! between two planar faces. <br>
  Standard_EXPORT     Standard_Boolean CheckPlanes(const Standard_Integer nF1,const Standard_Integer nF2) const;
  
//! Creates new edge from the edge nE with vertices nV1 and nV2 <br>
//! and returns the index of that new edge in the DS. <br>
  Standard_EXPORT     Standard_Integer SplitEdge(const Standard_Integer nE,const Standard_Integer nV1,const Standard_Real aT1,const Standard_Integer nV2,const Standard_Real aT2) ;
  
//! Updates pave blocks which have the paves with indices contained <br>
//! in the map <theDMI>. <br>
  Standard_EXPORT     void UpdatePaveBlocks(const BOPCol_DataMapOfIntegerInteger& theDMI) ;


BOPCol_ListOfShape myArguments;
BOPDS_PDS myDS;
BOPDS_PIterator myIterator;
Handle_BOPInt_Context myContext;
BOPAlgo_SectionAttribute mySectionAttribute;


private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
