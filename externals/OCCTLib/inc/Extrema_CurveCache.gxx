// Created on: 2008-12-28
// Created by: Roman Lygin
// Copyright (c) 2008-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//            roman.lygin@gmail.com

#include <Precision.hxx>

//=======================================================================
//function : Extrema_CurveCache
//purpose  : 
//=======================================================================

Extrema_CurveCache::Extrema_CurveCache(const Curve& theC,
                                   const Standard_Real theUFirst,
                                   const Standard_Real theULast,
                                   const Standard_Integer theNbSamples,
                                   const Standard_Boolean theToCalculate) :
    myC (0), myNbSamples (-1), myIsArrayValid (Standard_False)
{
  SetCurve (theC, theUFirst, theULast, theNbSamples, theToCalculate);
}

//=======================================================================
//function : Extrema_CurveCache
//purpose  : with sampling by knots and between them
//=======================================================================

Extrema_CurveCache::Extrema_CurveCache(const Curve& theC,
                                       const Standard_Real theUFirst,
                                       const Standard_Real theULast,
                                       const TColStd_Array1OfReal& IntervalsCN,
                                       const Standard_Integer StartIndex,
                                       const Standard_Integer EndIndex,
                                       const Standard_Real Coeff)
{
  myC = (Standard_Address)&theC;
  myIsArrayValid = Standard_False;
  myParamArray.Nullify();
  myPntArray.Nullify();
  
  myTrimFirst = myFirst = theUFirst;
  myTrimLast = myLast = theULast;

  Standard_Integer Nbp = 3;
  if (2 * Coeff < 10000.0)
    Nbp = Max((Standard_Integer) (2 * Coeff), Nbp);
  myNbSamples = (EndIndex - StartIndex)*Nbp + 1;

  const Standard_Integer aNbSTresh = 10000;
  if (myNbSamples > aNbSTresh)
  {
    Nbp = aNbSTresh / (EndIndex - StartIndex);
    myNbSamples = (EndIndex - StartIndex)*Nbp + 1;
  }
  
  //Cache points
  myParamArray = new TColStd_HArray1OfReal(1, myNbSamples);
  myPntArray = new ArrayOfPnt (1, myNbSamples);
  
  const Curve& aCurve = *((Curve*)myC);
  
  Standard_Integer i, j, k = 1;
  Standard_Real aPar;
  for (i = StartIndex; i < EndIndex; i++)
  {
    Standard_Real delta = (IntervalsCN(i+1) - IntervalsCN(i)) / Nbp;
    for (j = 0; j < Nbp; j++)
    {
      aPar = IntervalsCN(i) + j*delta;
      myParamArray->SetValue(k, aPar);
      myPntArray->SetValue(k++, aCurve.Value(aPar));
    }
  }
  Standard_Real aDelta = (myTrimLast - myTrimFirst) / myNbSamples / 200.;
  myParamArray->SetValue(1, myTrimFirst + aDelta);
  myPntArray->SetValue(1, aCurve.Value(myTrimFirst + aDelta));
  myParamArray->SetValue(myNbSamples, myTrimLast - aDelta);
  myPntArray->SetValue(myNbSamples, aCurve.Value(myTrimLast - aDelta));

  myIsArrayValid = Standard_True; //cache is available now
}

//=======================================================================
//function : Extrema_CurveCache
//purpose  : 
//=======================================================================

Extrema_CurveCache::Extrema_CurveCache() : myC (0), myNbSamples (-1),
    myIsArrayValid (Standard_False)
{
}

//=======================================================================
//function : SetCurve
//purpose  : 
//=======================================================================

void Extrema_CurveCache::SetCurve (const Curve& theC,
                                   const Standard_Integer theNbSamples,
                                   const Standard_Boolean theToCalculate)
{
  myC = (Standard_Address)&theC;
  myNbSamples = theNbSamples;
  myIsArrayValid = Standard_False;
  myParamArray.Nullify();
  myPntArray.Nullify();
  if (theToCalculate) {
    CalculatePoints();
  }
}

//=======================================================================
//function : SetCurve
//purpose  : 
//=======================================================================

void Extrema_CurveCache::SetCurve (const Curve& theC,
                                   const Standard_Real theUFirst,
                                   const Standard_Real theULast,
                                   const Standard_Integer theNbSamples,
                                   const Standard_Boolean theToCalculate)
{
  SetCurve (theC, theNbSamples, Standard_False); //no calculation
  SetRange (theUFirst, theULast, theToCalculate);
}

//=======================================================================
//function : SetRange
//purpose  : 
//=======================================================================

void Extrema_CurveCache::SetRange (const Standard_Real theUFirst,
                                   const Standard_Real theULast,
                                   const Standard_Boolean theToCalculate)
{
  //myTrimFirst and myTrimLast are used to compute values on unlimited curves
  myTrimFirst = myFirst = theUFirst;
  if (Precision::IsInfinite(myTrimFirst)){
    myTrimFirst = -1.0e+10;
  }
  myTrimLast = myLast = theULast;
  if (Precision::IsInfinite(myTrimLast)){
    myTrimLast = 1.0e+10;
  }

  myIsArrayValid = Standard_False;
  myParamArray.Nullify();
  myPntArray.Nullify();
  if (theToCalculate) {
    CalculatePoints();
  }
}

//=======================================================================
//function : CalculatePoints
//purpose  : 
//=======================================================================

void Extrema_CurveCache::CalculatePoints()
{
  if (myIsArrayValid) return; //no need to recalculate if nothing has changed
  const Curve& aCurve = *((Curve*)myC);

  // compute myNbSamples point along the [myTrimFirst, myTrimLast] range

  Standard_Real aDelta = myTrimLast - myTrimFirst;
  Standard_Real aPar0 = aDelta / myNbSamples / 100.;
  aDelta = (aDelta - aPar0) / (myNbSamples - 1);
  aPar0 = myTrimFirst + (aPar0/2.);

  //Cache points

  myParamArray = new TColStd_HArray1OfReal(1, myNbSamples);
  myPntArray = new ArrayOfPnt (1, myNbSamples);

  Standard_Integer i;
  Standard_Real aPar;
  for (i = 1, aPar = aPar0; i <= myNbSamples; i++, aPar += aDelta) {
    myParamArray->SetValue(i, aPar);
    myPntArray->SetValue (i, aCurve.Value (aPar));
  }

  myIsArrayValid = Standard_True; //cache is available now
}
