// Created on: 1992-10-12
// Created by: Denis PASCAL
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_NoMoreObject.hxx>
#include <Standard_NoSuchObject.hxx>
#include <TColStd_StackOfInteger.hxx>

//=======================================================================
//function : GraphTools_DFSIterator
//purpose  : 
//=======================================================================

GraphTools_DFSIterator::GraphTools_DFSIterator () {}


//=======================================================================
//function : Perform
//purpose  : 
//=======================================================================

void GraphTools_DFSIterator::Perform
  (const Graph& G, const Vertex& V)
{  
  Standard_Integer index;
  myVisited.Clear();
  TColStd_StackOfInteger myReady;
 
  index = myVisited.Add(V);
  myReady.Push(index);
  while (!myReady.IsEmpty()) {
    Vertex w1 = myVisited (myReady.Top());
    myReady.Pop();
    for (VIterator it(G,w1); it.More(); it.Next()) {
      Vertex w2 = it.Value();      
      if (!myVisited.Contains(w2)) {
	index = myVisited.Add(w2); 
	myReady.Push(index);
      }
    }
  }
  myCurrentIndex = 1;
}


//=======================================================================
//function : More
//purpose  : 
//=======================================================================

Standard_Boolean GraphTools_DFSIterator::More () const 
{
  return myCurrentIndex <= myVisited.Extent();
}


//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

void GraphTools_DFSIterator::Next () 
{
  myCurrentIndex++;
}


//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

const Vertex& GraphTools_DFSIterator::Value () const 
{
  return myVisited(myCurrentIndex);
}

