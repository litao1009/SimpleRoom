// Created on: 1991-09-10
// Created by: Denis PASCAL
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//		<dp>

#include <Standard_NoMoreObject.hxx>
#include <Standard_NoSuchObject.hxx>
#include <GraphDS_DataMapIteratorOfEntityRoleMap.hxx>

//=======================================================================
//function : GraphDS_IncidentRelationsIterator
//purpose  : 
//=======================================================================

GraphDS_IncidentRelationsIterator::GraphDS_IncidentRelationsIterator ()
{
}


//=======================================================================
//function : GraphDS_IncidentRelationsIterator
//purpose  : 
//=======================================================================

GraphDS_IncidentRelationsIterator::GraphDS_IncidentRelationsIterator 
  (const GraphDS_RelationGraph& G,
   const Handle(GraphDS_Relation)& R)
{
  Initialize (G,R);
}


//=======================================================================
//function : GraphDS_Initialize
//purpose  : 
//=======================================================================

void GraphDS_IncidentRelationsIterator::Initialize
  (const GraphDS_RelationGraph&,
   const Handle(GraphDS_Relation)& R)
{

  myMap.Clear();

  Handle(GraphDS_Entity) ENT;  
  Handle(GraphDS_Relation) REL;
  GraphDS_DataMapIteratorOfEntityRoleMap itv; 
  TColStd_MapIteratorOfMapOfTransient itr;

  for (itv.Initialize(R->GetEntities());itv.More();itv.Next()) {
    ENT = Handle(GraphDS_Entity)::DownCast(itv.Key());
    if (itv.Value() != GraphDS_OnlyOutput) {
      for (itr.Initialize(ENT->GetRelations()); itr.More(); itr.Next()) {
	REL = Handle(GraphDS_Relation)::DownCast(itr.Key());
	if (REL->IsOutput(ENT)) myMap.Add(REL);
      }
    }
  }
  myRelations.Initialize(myMap);
}


//=======================================================================
//function : More
//purpose  : 
//=======================================================================

Standard_Boolean GraphDS_IncidentRelationsIterator::More () const
{
  return myRelations.More();
}


//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

void GraphDS_IncidentRelationsIterator::Next () 
{
   myRelations.Next();
}
	

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

const Handle(GraphDS_Relation)& GraphDS_IncidentRelationsIterator::Value () const 
{  
  return  *((Handle(GraphDS_Relation)*)& myRelations.Key());
  //return Handle(GraphDS_Relation)::DownCast(myRelations.Key());
}








