// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <gp_Pnt.hxx>
#include <gp_Pnt2d.hxx>
#include <BRep_Tool.hxx>
#include <TopoDS.hxx>
#include <TopoDS_Vertex.hxx>
#include <TopoDS_Edge.hxx>
#include <TopoDS_Face.hxx>

inline void BRepMesh_ShapeTool::Init(const TopoDS_Shape& S) 
{
  theFIterator.Init(S, TopAbs_FACE);
}

inline Standard_Boolean BRepMesh_ShapeTool::MoreFace() 
{
  return theFIterator.More();
}

inline void BRepMesh_ShapeTool::NextFace()
{
  theFIterator.Next();
}

inline const TopoDS_Face& BRepMesh_ShapeTool:: CurrentFace()
{
  return TopoDS::Face(theFIterator.Current());
}


inline void BRepMesh_ShapeTool::Init(const TopoDS_Face& F) 
{
  theEIterator.Init(F,TopAbs_EDGE);
}

inline Standard_Boolean BRepMesh_ShapeTool::MoreEdge() 
{
  return theEIterator.More();
}

inline void BRepMesh_ShapeTool::NextEdge()
{
  theEIterator.Next();
}


inline const TopoDS_Edge& BRepMesh_ShapeTool::CurrentEdge()
{
  return TopoDS::Edge(theEIterator.Current());
}

inline void BRepMesh_ShapeTool::Init(const TopoDS_Edge& E) 
{
  theVIterator.Init(E,TopAbs_VERTEX);
}


inline void BRepMesh_ShapeTool::NextInternalVertex()
{
  theVIterator.Next();
}

inline const TopoDS_Vertex& BRepMesh_ShapeTool::CurrentInternalVertex()
{
  return TopoDS::Vertex(theVIterator.Current());
}

inline TopAbs_Orientation BRepMesh_ShapeTool::Orientation( 
					const TopoDS_Edge& E) 
{
  return E.Orientation();
}

inline TopAbs_Orientation BRepMesh_ShapeTool::Orientation( 
					const TopoDS_Face& F) 
{
  return F.Orientation();
}

inline void BRepMesh_ShapeTool::Range(const TopoDS_Edge& E,
				      const TopoDS_Face& F,
				      Standard_Real& wFirst,
				      Standard_Real& wLast)
{
  BRep_Tool::Range(E, F, wFirst, wLast);
}

inline void BRepMesh_ShapeTool::UVPoints(const TopoDS_Edge& E,
					 const TopoDS_Face& F,
					 gp_Pnt2d& uvFirst,
					 gp_Pnt2d& uvLast)
{
  BRep_Tool::UVPoints(E, F, uvFirst, uvLast);
}

inline Standard_Boolean BRepMesh_ShapeTool::Degenerated(const TopoDS_Edge& E)
{
  return BRep_Tool::Degenerated(E);
}

inline Standard_Real BRepMesh_ShapeTool::Tolerance(const TopoDS_Vertex& V)
{
  return BRep_Tool::Tolerance(V);
}

inline Standard_Real BRepMesh_ShapeTool::Parameter(const TopoDS_Vertex& V,
						   const TopoDS_Edge& E,
						   const TopoDS_Face& F)
{
  return BRep_Tool::Parameter(V,E,F);
}

inline gp_Pnt BRepMesh_ShapeTool::Pnt(const TopoDS_Vertex& V)
{
  return BRep_Tool::Pnt(V);
}


