// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <math_Memory.hxx>
#include <Standard_OutOfRange.hxx>
#include <Standard_Failure.hxx>

// macro to get size of C array
#define CARRAY_LENGTH(arr) (int)(sizeof(arr)/sizeof(arr[0]))

math_SingleTab::math_SingleTab(const Standard_Integer LowerIndex,
		               const Standard_Integer UpperIndex) :
                   Addr(Buf),
                   isAllocated(UpperIndex - LowerIndex + 1 > CARRAY_LENGTH(Buf)),
			       First(LowerIndex), Last(UpperIndex)
{
  Item* TheAddr = !isAllocated? Buf :
    (Item*) Standard::Allocate((Last-First+1) * sizeof(Item));
  Addr = (Standard_Address) (TheAddr - First);
}

math_SingleTab::math_SingleTab(const Item& Tab,
			       const Standard_Integer LowerIndex,
			       const Standard_Integer UpperIndex) :
			       Addr((void*)(&Tab - LowerIndex)), 
			       isAllocated(Standard_False),
			       First(LowerIndex), Last(UpperIndex)
			       
{
}

void math_SingleTab::Init(const Item& InitValue)
{
  for (Standard_Integer i=First; i<= Last; i++) {
    ((Item*)Addr)[i] = InitValue;
  }
}


math_SingleTab::math_SingleTab(const math_SingleTab& Other) :

  isAllocated(Other.Last - Other.First + 1 > CARRAY_LENGTH(Buf)),
  First(Other.First),
  Last(Other.Last)

{
  Item* TheAddr = !isAllocated? Buf :
    (Item*) Standard::Allocate((Last-First+1) * sizeof(Item));
  Addr = (Standard_Address) (TheAddr - First);
  Item* TheOtherAddr = (Item*) Other.Addr;
  memmove((void*) TheAddr, (const void*) (TheOtherAddr + First),
	  (size_t)(Last - First + 1) * sizeof(Item));
}


void math_SingleTab::Free()
{
  if(isAllocated) {
    Standard_Address it = (Standard_Address)&((Item*)Addr)[First];
    Standard::Free(it);
    Addr = 0;
  }
}


void math_SingleTab::SetLower(const Standard_Integer LowerIndex)
{
  Item* TheAddr = (Item*) Addr;
  Addr = (Standard_Address) (TheAddr + First - LowerIndex);
  Last = Last - First + LowerIndex;
  First = LowerIndex;
}




