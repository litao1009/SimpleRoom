// Created on: 1991-05-29
// Created by: Denis PASCAL
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//		<dp>


//=======================================================================
//function : GraphTools_ConnectedVerticesIterator
//purpose  : 
//=======================================================================

GraphTools_ConnectedVerticesIterator::GraphTools_ConnectedVerticesIterator () 
{}


//=======================================================================
//function : GraphTools_TopologicalSortIterator
//purpose  : 
//=======================================================================

GraphTools_ConnectedVerticesIterator::GraphTools_ConnectedVerticesIterator
  (const Graph& G)
{
  FromGraph (G);
}

//=======================================================================
//function : FromVertex
//purpose  : 
//=======================================================================

void GraphTools_ConnectedVerticesIterator::FromVertex
  (const Vertex& V)
{
  myIterator.FromVertex(V);
}


//=======================================================================
//function : GraphTools_ConnectedVerticesIterator
//purpose  : 
//=======================================================================
void GraphTools_ConnectedVerticesIterator::FromGraph  (const Graph& G)  
{
  for ( GIterator it (G); it.More(); it.Next() ) {
    myIterator.FromVertex(it.Value());
  }
}


//=======================================================================
//function : Perform
//purpose  : 
//=======================================================================

void GraphTools_ConnectedVerticesIterator::Perform
  (const Graph& G)
{
  myIterator.Perform(G);
}


//=======================================================================
//function : Reset
//purpose  : 
//=======================================================================

void GraphTools_ConnectedVerticesIterator::Reset ()
{
  myIterator.Reset();
}

//=======================================================================
//function : More
//purpose  : 
//=======================================================================
Standard_Boolean GraphTools_ConnectedVerticesIterator::More () const 
{
  return myIterator.More();
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================
void GraphTools_ConnectedVerticesIterator::Next () 
{
  myIterator.Next();
}


//=======================================================================
//function : NbVertices
//purpose  : 
//=======================================================================

Standard_Integer GraphTools_ConnectedVerticesIterator::NbVertices() const
{  
  return myIterator.NbVertices();
}


//=======================================================================
//function : Value
//purpose  : 
//=======================================================================
const Vertex& GraphTools_ConnectedVerticesIterator::Value 
  (const Standard_Integer I) const 
{
  return myIterator.Value(I);
}



















