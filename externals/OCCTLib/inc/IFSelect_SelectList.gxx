// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//#include <IFSelect_SelectList.ixx>

// ....    Instanciation avec "Handle(Entity)" qui offre ces deux methodes :
//   nb = ent->NbEntities()   et   ent_i = ent->InterfaceEntity(i)


IFSelect_SelectList::IFSelect_SelectList ()  {  }

    void IFSelect_SelectType::KeepInputEntity (Interface_EntityIterator& iter)
      {  iter.SelectType(STANDARD_TYPE(Entity));  }

    Standard_Integer IFSelect_SelectList::NbItems
  (const Handle(Standard_Transient)& ent)
{
  Handle(Entity) anent = Handle(Entity)::DownCast(ent);
  if (anent.IsNull()) return 0;
  return anent->NbEntities();
}

    Handle(Standard_Transient) IFSelect_SelectList::ListedEntity
  (const Standard_Integer num, const Handle(Standard_Transient)& ent)
{
  Handle(Entity) anent = Handle(Entity)::DownCast(ent);
  if (anent.IsNull()) Standard_OutOfRange::Raise
    ("IFSelect SelectType : ListedEntity");
  return anent->InterfacebEntity(num);
}


    TCollection_AsciiString  IFSelect_SelectList::ListLabel () const 
      {  return TCollection_AsciiString(STANDARD_TYPE(Entity)->Name());  }
